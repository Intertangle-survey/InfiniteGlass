from libc.stdlib cimport malloc, free
import os
from pysmlib.SMlib cimport *
from pysmlib.helpers cimport *
from pysmlib.ice cimport *

SmcSaveYourselfProcMask      = (1L << 0)
SmcDieProcMask               = (1L << 1)
SmcSaveCompleteProcMask      = (1L << 2)
SmcShutdownCancelledProcMask = (1L << 3)

cdef void save_yourself_wrapper(SmcConn smc_conn, SmPointer client_data, int save_type, Bool shutdown, int interact_style, Bool fast):
    method = <object> client_data
    method and method(save_type, shutdown, interact_style, fast)
cdef void die_wrapper(SmcConn smcConn, SmPointer client_data):
    method = <object> client_data
    method and method()
cdef void shutdown_cancelled_wrapper(SmcConn smcConn, SmPointer client_data):
    method = <object> client_data
    method and method()
cdef void save_complete_wrapper(SmcConn smcConn, SmPointer client_data):
    method = <object> client_data
    method and method()
cdef void save_yourself_phase2_wrapper(SmcConn smcConn, SmPointer client_data):
    method = <object> client_data
    method and method()
cdef void prop_reply_proc_wrapper(SmcConn smcConn, SmPointer client_data, int numProps, SmProp **props):
    method = <object> client_data
    method and method(smprops_to_dict(numProps, props))

class PySmcConn(object):
    cdef SmcConn conn
    cdef SmcCallbacks *callbacks
    cdef object references
    def __init__(self, SmcConn conn, SmcCallbacks *callbacks, references):
        self.conn = conn
        self.callbacks = callbacks
        self.references = references
    def SmcGetIceConnection(self):
        return IceConn(SmcGetIceConnection(self.conn))
    def SmcCloseConnection(self, reasons = []):
        cdef char **reasons_arr = <char **> malloc(sizeof(char *) * len(reasons))
        reasons = [reason.encode("utf-8") for reason in reasons]
        
        for idx in range(0, len(reasons)):
            reasons_arr[idx] = reasons[idx]
        res = SmcCloseConnection(self.conn, len(reasons), reasons_arr)
        free(reasons_arr)
        free(self.callbacks)
        return ["SmcClosedNow",
                "SmcClosedASAP",
                "SmcConnectionInUse"][res]

    def SmcProtocolVersion(self):
        return SmcProtocolVersion(self.conn)
    
    def SmcProtocolRevision(self):
        return SmcProtocolRevision(self.conn)

    def SmcVendor(self):
        return bytes(SmcVendor(self.conn)).decode("utf-8")

    def SmcRelease(self):
        return bytes(SmcRelease(self.conn)).decode("utf-8")

    def SmcGetProperties(prop_reply_proc):
        return SmcGetProperties(self.conn, &prop_reply_proc_wrapper, <SmPointer> prop_reply_proc):

    def SmcRequestSaveYourselfPhase2(self, save_yourself_phase2_proc):
        if not SmcRequestSaveYourselfPhase2(self.conn, &save_yourself_phase2_wrapper, <SmPointer> save_yourself_phase2_proc):
            raise Exception("Error calling SmcRequestSaveYourselfPhase2")
        
        
def SmcOpenConnection(
        str network_ids_list = None,
        object context = None,
        int xsmp_major_rev = 1,
        int xsmp_minor_rev = 0,
        bytes previous_id = None,
        
        save_yourself = None,
        die = None,
        save_complete = None,
        shutdown_cancelled = None):

        cdef SmcCallbacks *callbacks = <SmcCallbacks *>malloc(sizeof(SmcCallbacks))
        cdef char error_string_ret[1024]

        network_ids_list = network_ids_list.encode("utf-8")
        
        callbacks.save_yourself.callback = save_yourself_wrapper
        callbacks.die.callback = die_wrapper
        callbacks.save_complete.callback = save_complete_wrapper
        callbacks.shutdown_cancelled.callback = shutdown_cancelled_wrapper

        callbacks.save_yourself.client_data = <SmPointer> save_yourself
        callbacks.die.client_data = <SmPointer> die
        callbacks.save_complete.client_data = <SmPointer> save_complete
        callbacks.shutdown_cancelled.client_data = <SmPointer> shutdown_cancelled
        
        res = SmcOpenConnection(
            network_ids_list,
            <SmPointer>context if context is not None else NULL,
            xsmp_major_rev,
            xsmp_minor_rev,
            SmcSaveYourselfProcMask | SmcDieProcMask | SmcSaveCompleteProcMask | SmcShutdownCancelledProcMask,
            &callbacks,
            <char *>previous_id if previous_id else NULL,
            &client_id,
            1024,
            error_string_ret)
        if res == NULL:
            raise Exception(error_string_ret)
        return PySmcConn(res, callbacks, {
            id(save_yourself): save_yourself
            id(die): die,
            id(save_complete): save_complete
            id(shutdown_cancelled): shutdown_cancelled
        })


class Connection(object):
    network_ids_list = None
    save_yourself = None
    die = None
    save_complete = None
    shutdown_cancelled = None
    save_yourself_phase2 = None
    
    def __init__(self,
                 network_ids_list = None,
                 context = None,
                 xsmp_major_rev = 1,
                 xsmp_minor_rev = 0,
                 previous_id = None):

        self.network_ids_list = network_ids_list or os.environ["SESSION_MANAGER"]

        self.conn = SmcOpenConnection(
            network_ids_list,
            context,
            xsmp_major_rev,
            xsmp_minor_rev,
            previous_id,
            self.save_yourself,
            self.die,
            self.save_complete,
            self.shutdown_cancelled)
        
        self.iceconn = self.conn.SmcGetIceConnection()
    
    def __setitem__(self, name, value):
        cdef int numProps
        cdef SmProp **props
        dict_to_smprops({name:value}, &numProps, &props)
        SmcSetProperties(self.conn, numProps, props)
        free_smprops(numProps, props)
        
    def __delitem__(self, name):
        cdef char *namestr = name
        SmcDeleteProperties(self.conn, 1, &namestr)

    def save_yourself_done(self, success):
        SmcSaveYourselfDone(self.conn, success);

    def request_save_yourself_phase2(self):
        if not SmcRequestSaveYourselfPhase2(self.conn, &save_yourself_phase2_wrapper, <SmPointer> self):
            raise Exception("Error calling SmcRequestSaveYourselfPhase2")
        
    def prop_reply_proc(self, propdict):
        self.propdict = propdict

    def IceProcessMessages(self):
        self.iceconn.IceProcessMessages()
        
    def properties(self):
        self.propdict = None
        
        if not SmcGetProperties(self.conn, &prop_reply_proc_wrapper, <SmPointer> self):
            raise Exception("Error in SmcGetProperties")

        while self.propdict is None:
            self.IceProcessMessages()

        return self.propdict

    def items(self):
        return self.properties().items()
    
    def __getitem__(self, name):
        return self.properties()[name]

def main():
    class MyConnection(Connection):
        def signal_save_yourself(self, *arg):
            print("SAVE_YOURSELF", arg)
            self.save_yourself_done()
        def signal_die(self, *arg):
            print("DIE", arg)
        def signal_save_complete(self, *arg):
            print("SAVE_COMPLETE", arg)
        def signal_shutdown_cancelled(self, *arg):
            print("SHUTDOWN_CANCELLED", arg)

    c = Connection()
    try:
        while True:
            c.process()
    finally:
        c.close()
